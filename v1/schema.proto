syntax = "proto3";

package v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/plainq/go/v1";

// PlainQ service represents logic of work with PlainQ queue broker.
service PlainQService {
  // List all queues on the server.
  rpc ListQueues(ListQueuesRequest) returns (ListQueuesResponse) {}

  // DescribeQueue returns information about specified queue.
  rpc DescribeQueue(DescribeQueueRequest) returns (DescribeQueueResponse) {}

  // CreateQueue creates new queue.
  rpc CreateQueue(CreateQueueRequest) returns (CreateQueueResponse) {}

  // PurgeQueue deletes all messages from the queue.
  rpc PurgeQueue(PurgeQueueRequest) returns (PurgeQueueResponse) {}

  // DeleteQueue deletes queue.
  rpc DeleteQueue(DeleteQueueRequest) returns (DeleteQueueResponse) {}

  // Send sends message to the queue.
  rpc Send(SendRequest) returns (SendResponse) {}

  // Receive receives message from the queue.
  rpc Receive(ReceiveRequest) returns (ReceiveResponse) {}

  // Delete deletes message from the queue.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

// SendMessage represents a message which should be enqueued.
message SendMessage {
  // body represents the message content as sequence of bytes.
  bytes body = 1;
}

// ReceiveMessage represents a dequeued message.
message ReceiveMessage {
  // id represents unique message identifier.
  string id = 1;

  // body represents the message content as sequence of bytes.
  bytes body = 2;
}

// ListQueuesRequest represents a request to list queues.
message ListQueuesRequest {
  // Enum for listing queues by basis (ID, Name, CreatedAt)
  enum OrderBy {
    ORDER_BY_ID = 0;
    ORDER_BY_NAME = 1;
    ORDER_BY_CREATED_AT = 2;
  }
  // Enum for sort order (Ascending, Descending)
  enum SortBy {
    SORT_BY_ASC = 0;
    SORT_BY_DESC = 1;
  }

  // `queue_prefix` can be specified to search queues names of which starts with this prefix.
  string queue_prefix = 1;

  // `page_size` for pagination.
  int32 page_size = 2;

  // `page_token` from the previous request, if there was one.
  string page_token = 3;

  // `order_by` determines the Order By Basis (ID, Name, CreatedAt) for queues
  OrderBy order_by = 4;

  // `sort_by` determines the Sort Order (Ascending, Descending) for queues
  SortBy sort_by = 5;
}

// ListQueuesResponse represents a response to ListQueuesRequest which
// holds a map of queue names to queue properties.
message ListQueuesResponse {
  // `queueDetails` represents a map of queue names to queue properties.
  map<string, DescribeQueueResponse> queues = 1;

  // `next_page_token` is the token to be used for the next page of results.
  // If empty, it indicates no more pages.
  string next_page_token = 2;

  // `prev_page_token` is the token to be used for the previous page of results.
  // If empty, it indicates no more previous pages.
  string prev_page_token = 3;
}

// DescribeQueueRequest represents a request to describe specified queue.
// Queue can be searched by queue_id or by queue_name.
// If both are set the queue_id will be used.
message DescribeQueueRequest {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;

  // queue_name represents the name of the queue.
  string queue_name = 2;
}

// DescribeQueueResponse provides detailed information about a queue.
message DescribeQueueResponse {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;

  // queue_name represents the name of the queue.
  string queue_name = 2;

  // created_at denotes the timestamp when the queue was created.
  google.protobuf.Timestamp created_at = 3;

  // retention_period_seconds specifies the time after which messages in the queue expire.
  uint64 retention_period_seconds = 4;

  // visibility_timeout_seconds is the time a message stays invisible after being read.
  uint64 visibility_timeout_seconds = 5;

  // max_receive_attempts defines the maximum number of times a message can be read before it is deleted.
  uint32 max_receive_attempts = 6;

  // drop_policy defines queue behaviour when the retention_period_seconds or max_receive_attempts is reached.
  DropPolicy drop_policy = 7;

  // dead_letter_queue_id is taking effect only when the policy is set to DeadLetter.
  string dead_letter_queue_id = 100;
}

// DropPolicy represents an enumeration of supported policies.
enum DropPolicy {
  // DROP_POLICY_DROP is a default policy.
  // When queue has to apply the drop policy to the message, the
  // message will be dropped (permanently removed) from the queue.
  DROP_POLICY_DROP = 0;

  // DROP_POLICY_DEAD_LETTER represents a policy that when applied to the message,
  // the message will be moved to another queue, which has been specified as
  // dead letter queue.
  DROP_POLICY_DEAD_LETTER = 1;
}

// CreateQueueRequest represents a request to create a queue.
message CreateQueueRequest {
  // queue_name represents the name of the queue.
  string queue_name = 1;

  // retention_period_seconds specifies the time after which messages in the queue expire.
  uint64 retention_period_seconds = 2;

  // visibility_timeout_seconds is the time a message stays invisible after being read.
  uint64 visibility_timeout_seconds = 3;

  // max_receive_attempts defines the maximum number of times a message can be read before it is deleted.
  uint32 max_receive_attempts = 4;

  // drop_policy defines queue behaviour when the retention_period_seconds or max_receive_attempts is reached.
  DropPolicy drop_policy = 5;

  // dead_letter_queue_id is taking effect only when the policy is set to DeadLetter.
  string dead_letter_queue_id = 100;
}

// CreateQueueResponse represents a request to purge
// all messages from the specified queue.
message CreateQueueResponse {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;
}

// PurgeQueueRequest
message PurgeQueueRequest {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;
}

// PurgeQueueResponse represents a response the the purge queue request.
message PurgeQueueResponse {
  // messages_count represents an amount of deleted messages.
  uint64 messages_count = 1;
}

// DeleteQueueRequest
message DeleteQueueRequest {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;
  // force
  bool force = 2;
}

// DeleteQueueResponse
message DeleteQueueResponse {}

// SendRequest represents the request which sends given Messages
// to the specified queue.
message SendRequest {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;

  // messages represents an array of messages which will be send to the queue.
  repeated SendMessage messages = 2;
}

// SendResponse represents the response to SendRequest which contain information
// about the result of enqueueing messages that has been sent with request.
message SendResponse {
  // message_ids represents an array of message IDs that has been enqueued.
  repeated string message_ids = 1;
}

// ReceiveRequest represents the request which receives Messages
// from the specified queue.
message ReceiveRequest {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;

  // batch_size represents maximum number of messages to receive.
  // The batch size is limited to 10 messages.
  // The valid values: from 1 to 10.
  // If 0 is specified the 1 will be used.
  uint32 batch_size = 2;
}

// ReceiveResponse represents the response.
message ReceiveResponse {
  // messages represents an array of received messages from the queue.
  repeated ReceiveMessage messages = 1;
}

// Delete message represents the request which will delete specified
// messages from the queue.
message DeleteRequest {
  // queue_id represents the unique identifier for the queue.
  string queue_id = 1;

  // message_ids represents an array of message IDs which identifies
  // the messages that should be deleted from the queue.
  repeated string message_ids = 2;
}

// DeleteResponse represents a response to the DeleteRequest.
message DeleteResponse {
  // successful holds an array of message IDs
  // that has been deleted from the queue.
  repeated string successful = 1;

  // failed holds an array of message IDs that has not been deleted from the queue
  // and associated error message.
  repeated DeleteFailure failed = 2;
}

// DeleteFailure holds an information about error of message deletion.
message DeleteFailure {
  // message_id represents an identifier of the message which has to be deleted.
  string message_id = 1;

  // error represents an error message which shows why delete message has failed.
  string error = 2;
}
