syntax = "proto3";

package v1;
option go_package = "github.com/plainq/go/v1";

// PlainQ service represents logic of work with PlainQ queue broker.
service PlainQService {
  // List all queues on the server.
  rpc ListQueues (ListQueuesRequest) returns (ListQueuesResponse) {}

  // DescribeQueue returns information about specified queue.
  rpc DescribeQueue (DescribeQueueRequest) returns (DescribeQueueResponse) {}

  // CreateQueue creates new queue.
  rpc CreateQueue (CreateQueueRequest) returns (CreateQueueResponse) {}

  // PurgeQueue deletes all messages from the queue.
  rpc PurgeQueue (PurgeQueueRequest) returns (PurgeQueueResponse) {}

  // DeleteQueue deletes queue.
  rpc DeleteQueue (DeleteQueueRequest) returns (DeleteQueueResponse) {}

  // Send sends message to the queue.
  rpc Send (SendRequest) returns (SendResponse) {}

  // Receive receives message from the queue.
  rpc Receive (ReceiveRequest) returns (ReceiveResponse) {}

  // Delete deletes message from the queue.
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}
}

// SendMessage represents a message which can be enqueued or dequeued.
message SendMessage {
  bytes body = 1;
}

// ReceiveMessage represents a message which can be enqueued or dequeued.
message ReceiveMessage {
  string id = 1;
  bytes body = 2;
}

message MessageMetadata {
  map<string, MessageMetadataValue> metadata = 1;
}

message MessageMetadataValue {
  string type = 1;
  bytes value = 2;
}

message ListQueuesRequest {
  string queue_prefix = 1;
}

message ListQueuesResponse {
  map<string, DescribeQueueResponse> queues = 1;
}

message DescribeQueueRequest {
  string queue_id = 1;
  string queue_name = 2;
}

message DescribeQueueResponse {
  string queue_id = 1;
  string queue_name = 2;
  int64 retention_seconds = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
}

message CreateQueueRequest {
  string queue_name = 1;
  int64 retention_seconds = 2;
}

message CreateQueueResponse {
  string queue_id = 1;
}

message PurgeQueueRequest {
  string queue_id = 1;
}

message PurgeQueueResponse {
  int64 messages_count = 1;
}

message DeleteQueueRequest {
  string queue_id = 1;
  bool force = 2;
}

message DeleteQueueResponse {}

// SendRequest represents the request which sends given Messages
// to the specified queue.
message SendRequest {
  // queue_id represents unique queue identifier.
  string queue_id = 1;
  // messages represents an array of messages which will be send to the queue.
  repeated SendMessage messages = 2;
}

// SendResponse represents the response to SendRequest which contain information
// about the result of enqueueing messages that has been sent with request.
message SendResponse {
  repeated string message_ids = 1;
}

// ReceiveRequest represents the request which receives Messages
// from the specified queue.
message ReceiveRequest {
  // Represents unique queue identifier.
  string queue_id = 1;
  // Represents maximum number of messages to receive.
  // The batch size is limited to 10 messages.
  // The valid values: from 1 to 10.
  // If 0 is specified the 1 will be used.
  uint32 batch_size = 2;
}

// ReceiveResponse represents the response.
message ReceiveResponse {
  // messages represents an array of received messages from the queue.
  repeated ReceiveMessage messages = 2;
}

// Delete message represents the request which will delete specified
// messages from the queue.
message DeleteRequest {
  // queue_id represents unique queue identifier.
  string queue_id = 1;
  // message_ids represents an array of message IDs which identifies
  // he messages that should be deleted from the queue.
  repeated string message_ids = 2;
}

// DeleteResponse
message DeleteResponse {
  repeated string successful = 1;
  repeated DeleteFailure failed = 2;
}

message DeleteFailure {
  string message_id = 1;
  string error = 2;
}

